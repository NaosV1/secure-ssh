#!/bin/bash
# ==============================================
# üîí Script de s√©curisation VPS (Ubuntu/Debian) - Version am√©lior√©e
# ==============================================

set -euo pipefail  # Exit on error, undefined var, pipe failure
IFS=$'\n\t'

# --- Configuration ---
readonly SCRIPT_VERSION="2.0"
readonly SSH_PORT=28
readonly LOG_FILE="/var/log/vps-secure-$(date +%Y%m%d-%H%M%S).log"
readonly BACKUP_DIR="/root/config-backup-$(date +%Y%m%d-%H%M%S)"

# --- Couleurs pour l'affichage ---
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# --- Fonctions utilitaires ---
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERREUR]${NC} $*" | tee -a "$LOG_FILE" >&2
}

log_warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $*" | tee -a "$LOG_FILE"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "Ce script doit √™tre ex√©cut√© en tant que root (sudo)"
        exit 1
    fi
}

backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        mkdir -p "$BACKUP_DIR"
        cp -a "$file" "$BACKUP_DIR/" || {
            log_error "Impossible de sauvegarder $file"
            return 1
        }
        log "Backup de $file cr√©√© dans $BACKUP_DIR"
    fi
}

validate_username() {
    local username="$1"
    # Nettoyer les espaces
    username="${username// /}"

    # V√©rifier si vide
    if [[ -z "$username" ]]; then
        log_error "Le nom d'utilisateur ne peut pas √™tre vide"
        return 1
    fi

    # V√©rifier le format (3-32 caract√®res, commence par lettre ou _, contient lettres, chiffres, - ou _)
    if [[ ! "$username" =~ ^[a-z_][a-z0-9_-]{2,31}$ ]]; then
        log_error "Nom invalide. Format: 3-32 caract√®res, commence par lettre minuscule ou _, puis lettres, chiffres, - ou _"
        log_error "Exemples valides: admin, adminvps, webmaster, deploy_user"
        return 1
    fi

    # V√©rifier si l'utilisateur existe d√©j√†
    if id "$username" &>/dev/null; then
        log_error "L'utilisateur '$username' existe d√©j√†"
        return 1
    fi

    return 0
}

validate_port() {
    local port="$1"
    if [[ ! "$port" =~ ^[0-9]+$ ]] || [[ "$port" -lt 1024 ]] || [[ "$port" -gt 65535 ]]; then
        log_error "Port invalide. Utilisez un port entre 1024 et 65535"
        return 1
    fi
    return 0
}

# --- V√©rifications initiales ---
check_root

log "=== üöÄ D√©but de la s√©curisation VPS - Version $SCRIPT_VERSION ==="
log "Les logs seront sauvegard√©s dans : $LOG_FILE"

# V√©rifier la distribution
if ! grep -qE "Ubuntu|Debian" /etc/os-release; then
    log_warning "Ce script est con√ßu pour Ubuntu/Debian. Continuer ? (y/n)"
    read -r response < /dev/tty
    [[ ! "$response" =~ ^[Yy]$ ]] && exit 0
fi

# --- Mise √† jour du syst√®me ---
log "=== üîß Mise √† jour du syst√®me ==="
apt update -y || { log_error "√âchec de apt update"; exit 1; }
DEBIAN_FRONTEND=noninteractive apt upgrade -y || log_warning "Certaines mises √† jour ont √©chou√©"

# --- Cr√©ation d'un utilisateur non-root ---
log "=== üë§ Cr√©ation d'un utilisateur administrateur ==="

# Permettre de passer le nom d'utilisateur via variable d'environnement
if [[ -n "${VPS_USER:-}" ]]; then
    NEWUSER="$VPS_USER"
    log "Utilisation du nom d'utilisateur depuis VPS_USER: $NEWUSER"
    if ! validate_username "$NEWUSER"; then
        log_error "Le nom d'utilisateur fourni via VPS_USER est invalide"
        exit 1
    fi
else
    echo "Le nom doit : commencer par une lettre minuscule ou _, contenir 3-32 caract√®res (lettres, chiffres, - ou _)"
    while true; do
        read -rp "Entrez le nom du nouvel utilisateur admin (ex: adminvps) : " NEWUSER < /dev/tty
        # Nettoyer les espaces au d√©but et √† la fin (compatible avec pipe)
        NEWUSER="${NEWUSER#"${NEWUSER%%[![:space:]]*}"}"  # Supprimer espaces au d√©but
        NEWUSER="${NEWUSER%"${NEWUSER##*[![:space:]]}"}"  # Supprimer espaces √† la fin
        if validate_username "$NEWUSER"; then
            break
        fi
        echo ""
    done
fi

# Cr√©er l'utilisateur sans mot de passe (SSH key uniquement)
adduser --disabled-password --gecos "" "$NEWUSER" || { log_error "√âchec de cr√©ation de l'utilisateur"; exit 1; }
usermod -aG sudo "$NEWUSER"

log "Utilisateur $NEWUSER cr√©√© et ajout√© au groupe sudo"

# Configuration OBLIGATOIRE de la cl√© SSH (authentification par cl√© uniquement)
log "=== üîë Configuration de la cl√© SSH (OBLIGATOIRE) ==="
log_warning "Ce serveur utilisera UNIQUEMENT l'authentification par cl√© SSH (pas de mot de passe)"

SSH_KEY_CONFIGURED=false

# Permettre de passer la cl√© SSH via variable d'environnement
if [[ -n "${VPS_SSH_KEY:-}" ]]; then
    log "Utilisation de la cl√© SSH depuis VPS_SSH_KEY"
    su - "$NEWUSER" -c "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
    echo "$VPS_SSH_KEY" | su - "$NEWUSER" -c "tee ~/.ssh/authorized_keys > /dev/null"
    su - "$NEWUSER" -c "chmod 600 ~/.ssh/authorized_keys"
    log "Cl√© SSH configur√©e avec succ√®s depuis VPS_SSH_KEY"
    SSH_KEY_CONFIGURED=true
else
    # Demander la cl√© SSH interactivement
    echo ""
    log "Vous devez fournir votre cl√© SSH publique pour pouvoir vous connecter"
    log "O√π se trouve votre cl√© SSH publique ?"
    echo "1) Je vais la coller maintenant"
    echo "2) Elle est dans ~/.ssh/id_rsa.pub (ou id_ed25519.pub) sur ce serveur"
    echo "3) Je veux la g√©n√©rer maintenant"

    read -rp "Choix (1/2/3) : " ssh_key_choice < /dev/tty

    case "$ssh_key_choice" in
        1)
            log "Collez votre cl√© SSH publique (commence par ssh-rsa ou ssh-ed25519) :"
            read -r ssh_key < /dev/tty
            if [[ -n "$ssh_key" ]]; then
                su - "$NEWUSER" -c "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
                echo "$ssh_key" | su - "$NEWUSER" -c "tee ~/.ssh/authorized_keys > /dev/null"
                su - "$NEWUSER" -c "chmod 600 ~/.ssh/authorized_keys"
                log "Cl√© SSH configur√©e avec succ√®s"
                SSH_KEY_CONFIGURED=true
            fi
            ;;
        2)
            # Copier depuis l'utilisateur root actuel
            if [[ -f ~/.ssh/id_rsa.pub ]]; then
                su - "$NEWUSER" -c "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
                cat ~/.ssh/id_rsa.pub | su - "$NEWUSER" -c "tee ~/.ssh/authorized_keys > /dev/null"
                su - "$NEWUSER" -c "chmod 600 ~/.ssh/authorized_keys"
                log "Cl√© SSH copi√©e depuis ~/.ssh/id_rsa.pub"
                SSH_KEY_CONFIGURED=true
            elif [[ -f ~/.ssh/id_ed25519.pub ]]; then
                su - "$NEWUSER" -c "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
                cat ~/.ssh/id_ed25519.pub | su - "$NEWUSER" -c "tee ~/.ssh/authorized_keys > /dev/null"
                su - "$NEWUSER" -c "chmod 600 ~/.ssh/authorized_keys"
                log "Cl√© SSH copi√©e depuis ~/.ssh/id_ed25519.pub"
                SSH_KEY_CONFIGURED=true
            else
                log_error "Aucune cl√© SSH trouv√©e dans ~/.ssh/"
            fi
            ;;
        3)
            log "G√©n√©ration d'une nouvelle paire de cl√©s SSH..."
            su - "$NEWUSER" -c "ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N '' -C '$NEWUSER@$(hostname)'"
            su - "$NEWUSER" -c "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
            su - "$NEWUSER" -c "cat ~/.ssh/id_ed25519.pub > ~/.ssh/authorized_keys"
            su - "$NEWUSER" -c "chmod 600 ~/.ssh/authorized_keys"
            log "Cl√© SSH g√©n√©r√©e avec succ√®s"
            log_warning "IMPORTANT : Copiez la cl√© priv√©e ci-dessous sur votre machine locale !"
            echo "========== CL√â PRIV√âE (√Ä SAUVEGARDER) =========="
            su - "$NEWUSER" -c "cat ~/.ssh/id_ed25519"
            echo "=================================================="
            log_warning "Sauvegardez cette cl√© dans un fichier sur votre machine locale (ex: ~/.ssh/vps_key)"
            log_warning "Puis utilisez : ssh -i ~/.ssh/vps_key $NEWUSER@IP -p PORT"
            read -rp "Appuyez sur Entr√©e une fois que vous avez sauvegard√© la cl√©..." < /dev/tty
            SSH_KEY_CONFIGURED=true
            ;;
        *)
            log_error "Choix invalide"
            ;;
    esac
fi

# V√©rifier que la cl√© SSH a bien √©t√© configur√©e
if [[ "$SSH_KEY_CONFIGURED" != "true" ]]; then
    log_error "ERREUR CRITIQUE : Aucune cl√© SSH configur√©e !"
    log_error "Vous ne pourrez pas vous connecter apr√®s la d√©sactivation du mot de passe"
    log_error "Le script va s'arr√™ter pour √©viter de vous bloquer"
    exit 1
fi

log "Cl√© SSH configur√©e avec succ√®s pour $NEWUSER"

# --- S√©curisation SSH ---
log "=== üîê Configuration SSH ==="
backup_file "/etc/ssh/sshd_config"

# Utiliser un port personnalis√© ?
read -rp "Utiliser le port SSH $SSH_PORT ? (y pour oui, n pour choisir) : " use_default_port < /dev/tty
CUSTOM_SSH_PORT="$SSH_PORT"
if [[ ! "$use_default_port" =~ ^[Yy]$ ]]; then
    while true; do
        read -rp "Entrez le nouveau port SSH (1024-65535) : " CUSTOM_SSH_PORT < /dev/tty
        if validate_port "$CUSTOM_SSH_PORT"; then
            break
        fi
    done
fi

# Configuration SSH s√©curis√©e - AUTHENTIFICATION PAR CL√â UNIQUEMENT
cat >> /etc/ssh/sshd_config.d/99-custom-security.conf <<EOF
# Configuration de s√©curit√© personnalis√©e - SSH Key Only
Port $CUSTOM_SSH_PORT
PermitRootLogin no

# Authentification par cl√© SSH UNIQUEMENT (pas de mot de passe)
PubkeyAuthentication yes
PasswordAuthentication no
ChallengeResponseAuthentication no
KbdInteractiveAuthentication no
UsePAM yes

# Restrictions de s√©curit√©
X11Forwarding no
MaxAuthTries 3
MaxSessions 5
ClientAliveInterval 300
ClientAliveCountMax 2
AllowUsers $NEWUSER

# D√©sactiver les m√©thodes d'authentification faibles
PermitEmptyPasswords no
AuthenticationMethods publickey
EOF

# Tester la configuration SSH avant de red√©marrer
if sshd -t; then
    systemctl restart ssh || systemctl restart sshd
    log "SSH configur√© sur le port $CUSTOM_SSH_PORT"
    log "Authentification par cl√© SSH UNIQUEMENT (mot de passe d√©sactiv√©)"
else
    log_error "Configuration SSH invalide ! Restauration du backup..."
    cp "$BACKUP_DIR/sshd_config" /etc/ssh/sshd_config
    exit 1
fi

echo ""
log_warning "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
log_warning "‚ïë  ATTENTION : AUTHENTIFICATION PAR CL√â SSH UNIQUEMENT          ‚ïë"
log_warning "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""
log_warning "‚ö†Ô∏è  L'authentification par mot de passe est D√âSACTIV√âE"
log_warning "‚ö†Ô∏è  Vous DEVEZ utiliser votre cl√© SSH pour vous connecter"
echo ""
log_warning "üîë Commande de connexion :"
echo "   ssh $NEWUSER@$(hostname -I | awk '{print $1}') -p $CUSTOM_SSH_PORT"
echo ""
log_warning "üìã AVANT DE FERMER CETTE SESSION :"
echo "   1. Ouvrez un NOUVEL onglet/terminal"
echo "   2. Testez la connexion avec la commande ci-dessus"
echo "   3. SEULEMENT si √ßa fonctionne, fermez cette session"
echo ""

# --- UFW Firewall ---
log "=== üî• Configuration du pare-feu UFW ==="
apt install ufw -y

# D√©sactiver UFW temporairement pour configuration
ufw --force disable

# Configuration par d√©faut
ufw default deny incoming
ufw default allow outgoing

# R√®gles de base
ufw allow "$CUSTOM_SSH_PORT"/tcp comment "SSH"
ufw allow 80/tcp comment "HTTP"
ufw allow 443/tcp comment "HTTPS"

# Limiter les tentatives SSH
ufw limit "$CUSTOM_SSH_PORT"/tcp

# IPv6
if [[ -f /proc/net/if_inet6 ]]; then
    sed -i 's/IPV6=no/IPV6=yes/' /etc/default/ufw
    log "Support IPv6 activ√©"
fi

# Activer UFW
echo "y" | ufw enable
ufw status numbered

log "Pare-feu UFW configur√© et activ√©"

# --- Fail2Ban ---
log "=== üß± Installation de Fail2ban ==="
apt install fail2ban -y

backup_file "/etc/fail2ban/jail.local"

# Configuration avanc√©e de Fail2ban
cat > /etc/fail2ban/jail.local <<EOF
[DEFAULT]
bantime = 1h
findtime = 10m
maxretry = 5
destemail = root@localhost
sendername = Fail2Ban
action = %(action_mwl)s

[sshd]
enabled = true
port = $CUSTOM_SSH_PORT
filter = sshd
logpath = /var/log/auth.log
maxretry = 5
bantime = 1h
findtime = 10m

[sshd-ddos]
enabled = true
port = $CUSTOM_SSH_PORT
filter = sshd-ddos
logpath = /var/log/auth.log
maxretry = 10
bantime = 1h
findtime = 2m
EOF

systemctl enable fail2ban
systemctl restart fail2ban

log "Fail2ban configur√© et actif"

# --- Protection syst√®me suppl√©mentaire ---
log "=== üõ°Ô∏è Durcissement du syst√®me ==="

# D√©sactiver les services inutiles
systemctl disable --now avahi-daemon 2>/dev/null || true
systemctl disable --now cups 2>/dev/null || true

# Sysctl s√©curit√©
backup_file "/etc/sysctl.conf"

cat >> /etc/sysctl.d/99-security.conf <<EOF
# Protection r√©seau
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 2048
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5

# IPv6
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Protection m√©moire
kernel.randomize_va_space = 2
kernel.kptr_restrict = 2
kernel.dmesg_restrict = 1
EOF

sysctl -p /etc/sysctl.d/99-security.conf

log "Param√®tres de s√©curit√© syst√®me appliqu√©s"

# --- Netdata s√©curis√© ---
log "=== üìä Installation de Netdata (monitoring) ==="

read -rp "Installer Netdata ? (y/n) : " install_netdata < /dev/tty
if [[ "$install_netdata" =~ ^[Yy]$ ]]; then
    log "Installation de Netdata..."

    # T√©l√©charger et installer Netdata avec l'URL correcte
    if curl -fsSL https://get.netdata.cloud/kickstart.sh | bash -s -- --non-interactive --disable-telemetry; then
        # Attendre que Netdata soit install√©
        sleep 5

        # S√©curiser Netdata - √©couter uniquement sur localhost
        if [[ -f /etc/netdata/netdata.conf ]]; then
            # Backup de la config par d√©faut
            backup_file "/etc/netdata/netdata.conf"

            # Cr√©er la configuration personnalis√©e
            cat > /etc/netdata/netdata.conf <<EOF
[global]
    bind to = 127.0.0.1

[web]
    bind to = 127.0.0.1
EOF

            # Red√©marrer Netdata
            systemctl restart netdata 2>/dev/null || service netdata restart 2>/dev/null || true

            log "Netdata install√© et configur√© pour √©couter uniquement sur localhost"
            log "Pour y acc√©der, cr√©ez un tunnel SSH : ssh -L 19999:localhost:19999 $NEWUSER@votre_ip -p $CUSTOM_SSH_PORT"
            log "Puis acc√©dez √† http://localhost:19999 sur votre machine locale"
        else
            log_warning "Netdata install√© mais fichier de configuration non trouv√©"
        fi
    else
        log_error "√âchec de l'installation de Netdata"
        log_warning "Vous pouvez l'installer manuellement plus tard avec : bash <(curl -Ss https://get.netdata.cloud/kickstart.sh)"
    fi
fi

# --- Mises √† jour automatiques ---
log "=== üîÑ Configuration des mises √† jour automatiques de s√©curit√© ==="
apt install unattended-upgrades apt-listchanges -y

cat > /etc/apt/apt.conf.d/50unattended-upgrades <<EOF
Unattended-Upgrade::Allowed-Origins {
    "\${distro_id}:\${distro_codename}-security";
    "\${distro_id}ESMApps:\${distro_codename}-apps-security";
    "\${distro_id}ESM:\${distro_codename}-infra-security";
};
Unattended-Upgrade::AutoFixInterruptedDpkg "true";
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Automatic-Reboot "false";
EOF

echo 'APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";' > /etc/apt/apt.conf.d/20auto-upgrades

log "Mises √† jour automatiques de s√©curit√© configur√©es"

# --- R√©sum√© final ---
log "=== ‚úÖ Configuration termin√©e avec succ√®s ==="
echo ""
echo "=========================================="
echo "   üîí R√âSUM√â DE LA CONFIGURATION"
echo "=========================================="
echo "üßç Utilisateur admin    : $NEWUSER"
echo "üîê Port SSH             : $CUSTOM_SSH_PORT"
echo "üîë Auth SSH             : Cl√© uniquement (mot de passe D√âSACTIV√â)"
echo "üî• Pare-feu UFW         : Activ√©"
echo "üß± Fail2ban             : Actif"
echo "üõ°Ô∏è  Sysctl hardening    : Appliqu√©"
echo "üîÑ MAJ auto s√©curit√©    : Activ√©es"
if [[ "$install_netdata" =~ ^[Yy]$ ]]; then
    echo "üìä Netdata              : Install√© (localhost uniquement)"
fi
echo "üìù Logs                 : $LOG_FILE"
echo "üíæ Backups config       : $BACKUP_DIR"
echo "=========================================="
echo ""
log_warning "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
log_warning "‚ïë          IMPORTANT - ACTIONS REQUISES IMM√âDIATEMENT           ‚ïë"
log_warning "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""
log_warning "‚ö†Ô∏è  ATTENTION : Authentification par MOT DE PASSE D√âSACTIV√âE !"
log_warning "‚ö†Ô∏è  Seule l'authentification par CL√â SSH est autoris√©e"
echo ""
echo "1Ô∏è‚É£  NE FERMEZ PAS cette session SSH maintenant !"
echo ""
echo "2Ô∏è‚É£  Ouvrez un NOUVEL onglet/terminal et testez la connexion :"
echo "    ssh $NEWUSER@$(hostname -I | awk '{print $1}') -p $CUSTOM_SSH_PORT"
echo ""
echo "3Ô∏è‚É£  Si la connexion fonctionne ‚úÖ, vous pouvez :"
echo "    - Fermer cette ancienne session"
echo "    - Optionnel : Red√©marrer le serveur (sudo reboot)"
echo ""
echo "4Ô∏è‚É£  Si la connexion √©choue ‚ùå :"
echo "    - Gardez cette session ouverte"
echo "    - Restaurez : sudo cp $BACKUP_DIR/sshd_config /etc/ssh/sshd_config"
echo "    - Red√©marrez SSH : sudo systemctl restart ssh"
echo ""
log_warning "üìå Si vous √™tes bloqu√©, acc√©dez via la console web de votre h√©bergeur"
echo ""
log "Script termin√©. Consultez les logs pour plus de d√©tails : $LOG_FILE"
